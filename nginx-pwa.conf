# Nginx 配置文件 - Watch Monkey PWA
# 适用于 1Panel + OpenResty/Nginx
# 
# 部署说明：
# 1. 在 1Panel 中创建一个新网站
# 2. 将此配置添加到网站的 Nginx 配置中
# 3. 确保配置了 SSL 证书（PWA 需要 HTTPS）
# 4. 设置网站根目录为构建输出目录

server {
    listen 80;
    listen [::]:80;
    server_name your-domain.com www.your-domain.com;
    
    # 强制 HTTPS（PWA 必需）
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name your-domain.com www.your-domain.com;
    
    # SSL 证书配置（由 1Panel 自动管理）
    ssl_certificate /path/to/ssl/cert.pem;
    ssl_certificate_key /path/to/ssl/key.pem;
    
    # SSL 配置优化
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # 网站根目录（由 1Panel 管理）
    root /opt/1panel/apps/openresty/openresty/www/sites/watch-monkey;
    index index.html;
    
    # 字符集
    charset utf-8;
    
    # 日志配置
    access_log /opt/1panel/apps/openresty/openresty/www/sites/watch-monkey/logs/access.log;
    error_log /opt/1panel/apps/openresty/openresty/www/sites/watch-monkey/logs/error.log;
    
    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml font/truetype font/opentype 
               application/vnd.ms-fontobject image/svg+xml;
    
    # Brotli 压缩（如果 OpenResty 支持）
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css text/xml text/javascript 
    #              application/json application/javascript application/xml+rss 
    #              application/rss+xml font/truetype font/opentype 
    #              application/vnd.ms-fontobject image/svg+xml;
    
    # ===================================
    # PWA 核心配置
    # ===================================
    
    # Service Worker - 必须从根路径访问，且不能缓存
    location ~ ^/(sw\.js|registerSW\.js|workbox-.*\.js)$ {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        # CORS 头（如果需要）
        add_header Access-Control-Allow-Origin "*";
        
        # Service Worker MIME 类型
        add_header Content-Type "application/javascript; charset=utf-8";
        
        try_files $uri =404;
    }
    
    # PWA Manifest
    location ~ ^/manifest\.(json|webmanifest)$ {
        add_header Content-Type "application/manifest+json; charset=utf-8";
        add_header Cache-Control "public, max-age=86400"; # 24 小时
        
        # CORS 头
        add_header Access-Control-Allow-Origin "*";
        
        try_files $uri =404;
    }
    
    # ===================================
    # 静态资源缓存策略
    # ===================================
    
    # 图片和图标 - 长期缓存
    location ~* \.(png|jpg|jpeg|gif|ico|svg|webp)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    # 字体文件 - 长期缓存
    location ~* \.(woff|woff2|ttf|otf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        access_log off;
    }
    
    # CSS 和 JS - 中期缓存（带版本号的文件可以长期缓存）
    location ~* \.(css|js)$ {
        # 如果文件名包含哈希值（如 index-abc123.js），则长期缓存
        if ($uri ~ "-[a-zA-Z0-9]{8,}\.(css|js)$") {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # 否则短期缓存
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # ===================================
    # PWA 离线支持
    # ===================================
    
    # API 请求代理（如果需要）
    location /api/ {
        # 代理到后端 API
        proxy_pass http://localhost:5678/;
        
        # 代理头设置
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket 支持（如果需要）
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # 超时设置
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # ===================================
    # SPA 路由支持
    # ===================================
    
    # 所有其他请求都返回 index.html（支持前端路由）
    location / {
        # 首先尝试文件，然后目录，最后返回 index.html
        try_files $uri $uri/ /index.html;
        
        # HTML 文件不缓存
        location ~ \.html$ {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
    }
    
    # ===================================
    # 安全配置
    # ===================================
    
    # 安全头
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Content Security Policy（根据需要调整）
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api.example.com" always;
    
    # Permissions Policy
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # ===================================
    # 其他配置
    # ===================================
    
    # 隐藏 Nginx 版本号
    server_tokens off;
    
    # 禁止访问隐藏文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 禁止访问备份文件
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 404 页面
    error_page 404 /index.html;
    
    # 50x 错误页面
    error_page 500 502 503 504 /index.html;
}

