name: 'Update Gitea JSON URLs'

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag to update (e.g., v0.2.37)'
        required: true
        type: string
  workflow_run:
    workflows: ["publish"]
    types:
      - completed

jobs:
  update-gitea-json:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set release tag
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG_NAME="${{ github.event.inputs.tag_name }}"
          else
            # ‰ªé GitHub Ëé∑ÂèñÊúÄÊñ∞ÁöÑ release tag
            TAG_NAME=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name')
          fi
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "üìå Processing tag: $TAG_NAME"

      - name: Download JSON files from GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ steps.set_tag.outputs.tag_name }}
        run: |
          mkdir -p github-json-files
          
          echo "üì• Downloading JSON files from GitHub release $TAG_NAME..."
          
          # Ëé∑Âèñ GitHub release ‰ø°ÊÅØ
          RELEASE_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${TAG_NAME}")
          
          RELEASE_ID=$(echo "$RELEASE_DATA" | jq -r '.id')
          
          if [ "$RELEASE_ID" == "null" ] || [ -z "$RELEASE_ID" ]; then
            echo "‚ùå Release $TAG_NAME not found in GitHub"
            exit 1
          fi
          
          echo "‚úÖ Found GitHub release ID: $RELEASE_ID"
          
          # Ëé∑ÂèñÊâÄÊúâ assets
          ASSETS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets")
          
          # ‰∏ãËΩΩÊâÄÊúâ .json Êñá‰ª∂
          echo "$ASSETS" | jq -r '.[] | select(.name | endswith(".json")) | "\(.id) \(.name)"' | \
          while read asset_id filename; do
            echo "  üìÑ Downloading $filename..."
            curl -L -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/octet-stream" \
              "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id" \
              -o "github-json-files/$filename"
            
            if [ -f "github-json-files/$filename" ]; then
              echo "  ‚úÖ Downloaded $filename ($(ls -lh "github-json-files/$filename" | awk '{print $5}'))"
            else
              echo "  ‚ùå Failed to download $filename"
            fi
          done
          
          echo ""
          echo "üìä Downloaded files:"
          ls -lh github-json-files/

      - name: Update URLs in JSON files
        env:
          GITEA_URL: ${{ secrets.GITEA_URL }}
          GITEA_REPO: ${{ secrets.GITEA_REPO }}
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
        run: |
          GITHUB_REPO="${{ github.repository }}"
          
          echo "üîÑ Updating URLs in JSON files..."
          echo "  From: https://github.com/${GITHUB_REPO}/releases/download/"
          echo "  To: ${GITEA_URL}/${GITEA_REPO}/releases/download/"
          echo "  Token: ${GITEA_TOKEN:0:8}..."
          echo ""
          
          JSON_COUNT=0
          
          # ‰ΩøÁî® for Âæ™ÁéØËÄå‰∏çÊòØ while readÔºåÈÅøÂÖçÂ≠ê shell ÈóÆÈ¢ò
          for json_file in github-json-files/*.json; do
            if [ ! -f "$json_file" ]; then
              echo "‚ö†Ô∏è  No JSON files found"
              continue
            fi
            
            filename=$(basename "$json_file")
            echo "  üìù Processing $filename..."
            
            # ÊòæÁ§∫ÂéüÂßãÂÜÖÂÆπ
            echo "  üìÑ Original content (first 5 lines):"
            head -n 5 "$json_file" | sed 's/^/    /'
            echo ""
            
            # ‰∏ÄÊ¨°ÊÄßÂÆåÊàêÊâÄÊúâÊõøÊç¢Ôºå‰ΩøÁî® -e ÂèÇÊï∞ÈìæÂºèÊâßË°åÂ§ö‰∏™ÊõøÊç¢
            # 1. ÁßªÈô§ÊóßÁöÑ token ÂèÇÊï∞
            # 2. ÊõøÊç¢ GitHub URL ‰∏∫ Gitea URL  
            # 3. Ê∑ªÂä†Êñ∞ÁöÑ token ÂèÇÊï∞
            if [ -n "$GITEA_TOKEN" ]; then
              sed -i.bak \
                -e 's/?token=[^"]*//g' \
                -e "s|https://github.com/${GITHUB_REPO}/releases/download/|${GITEA_URL}/${GITEA_REPO}/releases/download/|g" \
                -e "s|\(${GITEA_URL}/${GITEA_REPO}/releases/download/[^\"?]*\)|\1?token=${GITEA_TOKEN}|g" \
                "$json_file"
            else
              sed -i.bak \
                -e 's/?token=[^"]*//g' \
                -e "s|https://github.com/${GITHUB_REPO}/releases/download/|${GITEA_URL}/${GITEA_REPO}/releases/download/|g" \
                "$json_file"
            fi
            
            # Âà†Èô§Â§á‰ªΩÊñá‰ª∂
            rm -f "${json_file}.bak"
            
            # È™åËØÅÊñá‰ª∂‰ªçÁÑ∂ÊúâÊïà
            if [ ! -s "$json_file" ]; then
              echo "  ‚ùå Error: $filename is empty after update!"
              exit 1
            fi
            
            echo "  ‚úÖ Updated $filename"
            JSON_COUNT=$((JSON_COUNT + 1))
            
            # ÊòæÁ§∫Êõ¥Êñ∞ÂêéÁöÑÂÜÖÂÆπÔºàÁî®‰∫éË∞ÉËØïÔºâ
            echo "  üìÑ Updated content preview:"
            if command -v jq &> /dev/null; then
              cat "$json_file" | jq -r '.platforms | to_entries[] | "    Platform: \(.key)\n    URL: \(.value.url)"' 2>/dev/null || \
              grep -o "\"url\"[^,}]*" "$json_file" | head -n 3 | sed 's/^/    /'
            else
              grep -o "\"url\"[^,}]*" "$json_file" | head -n 3 | sed 's/^/    /'
            fi
            echo ""
          done
          
          echo "‚úÖ Updated $JSON_COUNT JSON files"

      - name: Upload updated JSON files back to Gitea
        env:
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
          GITEA_URL: ${{ secrets.GITEA_URL }}
          GITEA_REPO: ${{ secrets.GITEA_REPO }}
          TAG_NAME: ${{ steps.set_tag.outputs.tag_name }}
        run: |
          echo "üì§ Uploading updated JSON files back to Gitea..."
          
          # Ëé∑Âèñ release ID
          RELEASE_DATA=$(curl -s -H "Authorization: token $GITEA_TOKEN" \
            "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/tags/${TAG_NAME}")
          
          RELEASE_ID=$(echo "$RELEASE_DATA" | jq -r '.id')
          
          echo "Release ID: $RELEASE_ID"
          
          # Âà†Èô§ÊóßÁöÑ JSON ÈôÑ‰ª∂
          echo "üóëÔ∏è  Deleting old JSON attachments..."
          echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name | endswith(".json")) | "\(.id) \(.name)"' | \
          while read attachment_id filename; do
            echo "  Deleting $filename (ID: $attachment_id)..."
            DELETE_CODE=$(curl -s -w "%{http_code}" -o /dev/null -X DELETE \
              -H "Authorization: token $GITEA_TOKEN" \
              "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/${RELEASE_ID}/assets/${attachment_id}")
            
            if [ "$DELETE_CODE" == "204" ]; then
              echo "  ‚úÖ Deleted $filename"
            else
              echo "  ‚ö†Ô∏è  Failed to delete $filename (HTTP $DELETE_CODE)"
            fi
          done
          
          echo ""
          echo "üì§ Uploading updated JSON files to Gitea..."
          
          UPLOAD_COUNT=0
          
          for json_file in github-json-files/*.json; do
            if [ ! -f "$json_file" ]; then
              echo "‚ö†Ô∏è  No JSON files found to upload"
              break
            fi
            
            filename=$(basename "$json_file")
            filesize=$(ls -lh "$json_file" | awk '{print $5}')
            
            echo "  ‚è≥ Uploading $filename ($filesize)..."
            
            UPLOAD_CODE=$(curl -s -w "%{http_code}" -o /dev/null \
              -H "Authorization: token $GITEA_TOKEN" \
              -F "attachment=@${json_file}" \
              "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/${RELEASE_ID}/assets?name=${filename}")
            
            if [ "$UPLOAD_CODE" == "201" ]; then
              echo "  ‚úÖ Uploaded $filename"
              UPLOAD_COUNT=$((UPLOAD_COUNT + 1))
            else
              echo "  ‚ùå Failed to upload $filename (HTTP $UPLOAD_CODE)"
            fi
          done
          
          echo ""
          echo "üéâ Successfully updated Gitea JSON files!"
          echo "üìä Summary:"
          echo "  - Release: $TAG_NAME"
          echo "  - Files updated: $UPLOAD_COUNT"
          echo "  - URL: ${GITEA_URL}/${GITEA_REPO}/releases/tag/${TAG_NAME}"

