name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'
          - platform: 'ubuntu-latest' # for Android
            args: '--target aarch64-linux-android'
            target: 'aarch64-linux-android'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的 git 历史记录

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform == 'ubuntu-latest' && 'aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          shared-key: ${{ matrix.target }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          cache-on-failure: true
          # 设置缓存过期时间,避免缓存过大
          save-if: ${{ github.ref == 'refs/heads/release' }}

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-${{ matrix.target }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-bun-
            ${{ runner.os }}-bun-

      - name: install frontend dependencies
        run: bun install

      - name: Setup Android SDK
        if: matrix.platform == 'ubuntu-latest'
        uses: android-actions/setup-android@v3

      - name: Install Java
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle dependencies
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('src-tauri/gen/android/**/*.gradle*', 'src-tauri/gen/android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Android build output
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/cache@v4
        with:
          path: |
            src-tauri/gen/android/.gradle
            src-tauri/gen/android/app/build
            src-tauri/gen/android/build
          key: ${{ runner.os }}-android-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-build-

      - name: Cache Android NDK
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/cache@v4
        id: ndk-cache
        with:
          path: ${{ env.ANDROID_HOME }}/ndk/27.0.12077973
          key: ${{ runner.os }}-ndk-27.0.12077973
          restore-keys: |
            ${{ runner.os }}-ndk-

      - name: Setup Android NDK
        if: matrix.platform == 'ubuntu-latest' && steps.ndk-cache.outputs.cache-hit != 'true'
        run: |
          echo "📦 Downloading Android NDK..."
          sdkmanager "ndk;27.0.12077973"

      - name: Configure Android NDK environment
        if: matrix.platform == 'ubuntu-latest'
        run: |
          # Tauri 需要 NDK_HOME 环境变量
          echo "NDK_HOME=$ANDROID_HOME/ndk/27.0.12077973" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/27.0.12077973" >> $GITHUB_ENV
          echo "$ANDROID_HOME/ndk/27.0.12077973/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          echo "CC_aarch64_linux_android=aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "CXX_aarch64_linux_android=aarch64-linux-android21-clang++" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "✅ Android NDK configured"

      - name: Setup Android signing
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cd src-tauri/gen/android
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties
          
          echo "✅ Android signing configured"
          cat keystore.properties | sed 's/password=.*/password=***/'

      - name: Set environment variables for build
        shell: bash
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL || 'http://localhost:5678' }}" >> $GITHUB_ENV
          echo "✅ Set VITE_API_BASE_URL for build process"

      - name: Get version from package.json
        id: get_version
        shell: bash
        run: |
          VERSION=$(cat package.json | grep '"version"' | head -1 | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: Generate release notes from git commits
        id: release_notes
        shell: bash
        run: |
          # 获取上一个版本的 tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # 生成提交日志
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## 📝 更新内容" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s" --no-merges >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 📦 安装说明" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "请从下方 Assets 中下载适合您系统的安装包：" >> $GITHUB_OUTPUT
          echo "- **macOS (Apple Silicon)**: 下载包含 \`aarch64\` 的 \`.dmg\` 或 \`.app.tar.gz\` 文件" >> $GITHUB_OUTPUT
          echo "- **macOS (Intel)**: 下载包含 \`x64\` 的 \`.dmg\` 或 \`.app.tar.gz\` 文件" >> $GITHUB_OUTPUT
          echo "- **Windows**: 下载 \`.msi\` 或 \`.exe\` 安装文件" >> $GITHUB_OUTPUT
          echo "- **Android**: 下载 \`.apk\` 文件" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 🔄 自动更新" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "如果您已安装旧版本，应用会自动检测并提示更新。" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Android 使用 Tauri 的 android build 命令
      - name: Build Android APK
        if: matrix.platform == 'ubuntu-latest'
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'http://localhost:5678' }}
        run: |
          echo "🤖 Building Android APK with Tauri CLI..."
          # --ci: 非交互模式，跳过提示
          # --apk: 构建 APK 文件
          # --split-per-abi: 为每个架构生成单独的 APK（更小的文件）
          bun tauri android build --ci --apk --split-per-abi
          
          echo "✅ Android APK built successfully"
          echo "📦 Generated APK files:"
          find src-tauri/gen/android/app/build/outputs/apk -name "*.apk" -type f -exec ls -lh {} \;

      # 桌面平台使用 tauri-action
      - uses: tauri-apps/tauri-action@v0
        if: matrix.platform != 'ubuntu-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          # Vite 环境变量 - 构建时注入
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'http://localhost:5678' }}
        with:
          tagName: ${{ steps.get_version.outputs.tag_name }}
          releaseName: 'Watch Monkey ${{ steps.get_version.outputs.tag_name }}'
          releaseBody: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: true
          args: ${{ matrix.args }}

      # 为 Android 单独上传 APK 到 Release
      - name: Upload Android APK to Release
        if: matrix.platform == 'ubuntu-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          name: 'Watch Monkey ${{ steps.get_version.outputs.tag_name }}'
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
          files: |
            src-tauri/gen/android/app/build/outputs/apk/**/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 实时同步到 Gitea（每个平台构建完成后立即执行）
      - name: Sync current platform to Gitea
        if: always() && (success() || failure())
        env:
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
          GITEA_URL: ${{ secrets.GITEA_URL }}
          GITEA_REPO: ${{ secrets.GITEA_REPO }}
          TAG_NAME: ${{ steps.get_version.outputs.tag_name }}
          RELEASE_NAME: 'Watch Monkey ${{ steps.get_version.outputs.tag_name }}'
          RELEASE_BODY: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          PLATFORM: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
        run: |
          # 如果没有配置 Gitea，跳过
          if [ -z "$GITEA_TOKEN" ] || [ -z "$GITEA_URL" ] || [ -z "$GITEA_REPO" ]; then
            echo "⚠️  Gitea not configured, skipping sync"
            exit 0
          fi
          
          echo "🚀 Syncing $PLATFORM ($TARGET) to Gitea..."
          
          # 检查或创建 Gitea release
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /tmp/gitea_release.json \
            -H "Authorization: token $GITEA_TOKEN" \
            "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/tags/${TAG_NAME}")
          
          if [ "$HTTP_CODE" == "404" ]; then
            echo "📝 Creating new Gitea release..."
            BODY_JSON=$(printf '%s' "$RELEASE_BODY" | jq -Rs .)
            CREATE_RESPONSE=$(curl -s -w "\n%{http_code}" \
              -H "Authorization: token $GITEA_TOKEN" \
              -H "Content-Type: application/json" \
              "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases" \
              -d @- <<EOF
          {
            "tag_name": "$TAG_NAME",
            "name": "$RELEASE_NAME",
            "body": $BODY_JSON,
            "draft": false,
            "prerelease": false
          }
          EOF
            )
            HTTP_CODE=$(echo "$CREATE_RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$CREATE_RESPONSE" | sed '$d')
            
            if [ "$HTTP_CODE" != "201" ]; then
              echo "❌ Failed to create release (HTTP $HTTP_CODE)"
              exit 1
            fi
            GITEA_RELEASE_ID=$(echo "$RESPONSE_BODY" | jq -r '.id')
          else
            GITEA_RELEASE_ID=$(jq -r '.id' /tmp/gitea_release.json)
            echo "✅ Found existing release with ID: $GITEA_RELEASE_ID"
          fi
          
          # 收集当前平台的构建产物
          echo "📦 Collecting assets for $PLATFORM..."
          mkdir -p /tmp/upload-assets
          
          if [ "$PLATFORM" == "ubuntu-latest" ]; then
            # Android APK
            find src-tauri/gen/android/app/build/outputs/apk -name "*.apk" -type f -exec cp {} /tmp/upload-assets/ \; 2>/dev/null || true
          else
            # 桌面平台（从 GitHub Release 下载刚上传的文件）
            sleep 10  # 等待 GitHub Release 上传完成
            
            # 获取 GitHub Release 的最新 assets
            GITHUB_ASSETS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/${TAG_NAME}")
            
            # 根据平台和架构筛选文件
            echo "$GITHUB_ASSETS" | jq -r --arg target "$TARGET" \
              '.assets[] | select(.name | contains($target)) | "\(.id) \(.name)"' | \
              while read asset_id asset_name; do
                echo "  ⏳ Downloading $asset_name..."
                curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/octet-stream" \
                  "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id" \
                  -o "/tmp/upload-assets/$asset_name"
              done
          fi
          
          # 上传文件到 Gitea
          UPLOADED=0
          for asset in /tmp/upload-assets/*; do
            if [ -f "$asset" ]; then
              filename=$(basename "$asset")
              filesize=$(ls -lh "$asset" | awk '{print $5}')
              
              # 检查文件是否已存在
              EXISTING_ASSET=$(curl -s -H "Authorization: token $GITEA_TOKEN" \
                "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/${GITEA_RELEASE_ID}/assets" | \
                jq -r --arg name "$filename" '.[] | select(.name == $name) | .id')
              
              if [ -n "$EXISTING_ASSET" ]; then
                echo "  ⏭️  Skipping $filename (already exists)"
                continue
              fi
              
              echo "  ⏳ Uploading $filename ($filesize)..."
              
              # 处理 JSON 文件：替换 GitHub URL 为 Gitea URL
              if [[ "$filename" == *.json ]]; then
                GITHUB_REPO="${{ github.repository }}"
                sed -i.bak \
                  "s|https://github.com/${GITHUB_REPO}/releases/download/|${GITEA_URL}/${GITEA_REPO}/releases/download/|g; \
                   s|\(${GITEA_URL}/${GITEA_REPO}/releases/download/[^\"]*\)|\1?token=${GITEA_TOKEN}|g" \
                  "$asset" || true
                rm -f "${asset}.bak"
              fi
              
              UPLOAD_CODE=$(curl -s -w "%{http_code}" -o /dev/null \
                -H "Authorization: token $GITEA_TOKEN" \
                -F "attachment=@${asset}" \
                "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/${GITEA_RELEASE_ID}/assets?name=${filename}")
              
              if [ "$UPLOAD_CODE" == "201" ]; then
                echo "  ✅ Uploaded $filename"
                UPLOADED=$((UPLOADED + 1))
              else
                echo "  ❌ Failed to upload $filename (HTTP $UPLOAD_CODE)"
              fi
            fi
          done
          
          echo ""
          echo "🎉 Synced $PLATFORM: $UPLOADED file(s) uploaded"

  # 后备同步任务：检查是否有遗漏的文件需要同步
  # 注意：大部分文件已经在各平台构建完成后实时同步了
  sync-to-gitea:
    needs: publish-tauri
    runs-on: ubuntu-latest
    if: always()  # 即使某些平台失败也运行
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check and sync any missing files
        run: |
          echo "🔍 Checking for any missing files that weren't synced in real-time..."
          echo "ℹ️  Note: Most files should already be synced by individual platform jobs"

      - name: Get latest release info
        id: release_info
        run: |
          # 获取最新的 release 信息
          RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          
          # 使用简单的单行输出
          echo "tag_name=$(echo $RELEASE_DATA | jq -r '.tag_name')" >> $GITHUB_OUTPUT
          echo "name=$(echo $RELEASE_DATA | jq -r '.name')" >> $GITHUB_OUTPUT
          echo "draft=$(echo $RELEASE_DATA | jq -r '.draft')" >> $GITHUB_OUTPUT
          echo "prerelease=$(echo $RELEASE_DATA | jq -r '.prerelease')" >> $GITHUB_OUTPUT
          echo "release_id=$(echo $RELEASE_DATA | jq -r '.id')" >> $GITHUB_OUTPUT
          
          # 使用 EOF 分隔符处理多行 body 内容
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_DATA" | jq -r '.body' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download release assets
        run: |
          mkdir -p release-assets
          
          # 获取所有 assets
          ASSETS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.release_info.outputs.release_id }}/assets")
          
          # 显示 asset 信息
          echo "📦 Found assets:"
          echo "$ASSETS" | jq -r '.[] | "  - \(.name) (\(.size | tonumber / 1024 / 1024 | floor)MB)"'
          
          # 下载每个 asset
          echo ""
          echo "⬇️  Downloading assets..."
          echo "$ASSETS" | jq -r '.[] | "\(.id) \(.name)"' | while read asset_id asset_name; do
            echo "  ⏳ Downloading $asset_name..."
            curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/octet-stream" \
              "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id" \
              -o "release-assets/$asset_name"
            
            if [ -f "release-assets/$asset_name" ]; then
              echo "  ✅ Downloaded $asset_name ($(ls -lh "release-assets/$asset_name" | awk '{print $5}'))"
            else
              echo "  ❌ Failed to download $asset_name"
            fi
          done
          
          echo ""
          echo "📋 All downloaded files:"
          ls -lh release-assets/

      - name: Update URLs in JSON files
        env:
          TAG_NAME: ${{ steps.release_info.outputs.tag_name }}
          GITEA_URL: ${{ secrets.GITEA_URL }}
          GITEA_REPO: ${{ secrets.GITEA_REPO }}
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
        run: |
          # 获取 GitHub 仓库信息
          GITHUB_REPO="${{ github.repository }}"
          
          echo "🔄 Replacing GitHub URLs with Gitea URLs in JSON files..."
          
          # 处理所有 JSON 文件
          find release-assets -name "*.json" -type f | while read -r json_file; do
            echo "  📝 Processing $(basename "$json_file")..."
            
            # 替换 GitHub 下载 URL 为 Gitea URL，并添加访问 token
            # 格式：https://github.com/USER/REPO/releases/download/TAG/FILE
            # 替换为：GITEA_URL/GITEA_REPO/releases/download/TAG/FILE?token=TOKEN
            if [ -n "$GITEA_TOKEN" ]; then
              # 如果配置了 token，在 URL 后面添加 token
              sed -i.bak \
                "s|https://github.com/${GITHUB_REPO}/releases/download/|${GITEA_URL}/${GITEA_REPO}/releases/download/|g; \
                 s|\(${GITEA_URL}/${GITEA_REPO}/releases/download/[^\"]*\)|\1?token=${GITEA_TOKEN}|g" \
                "$json_file"
            else
              # 如果没有配置 token，只替换 URL
              sed -i.bak \
                "s|https://github.com/${GITHUB_REPO}/releases/download/|${GITEA_URL}/${GITEA_REPO}/releases/download/|g" \
                "$json_file"
            fi
            
            # 删除备份文件
            rm -f "${json_file}.bak"
            
            echo "  ✅ Updated $(basename "$json_file")"
          done
          
          echo "✅ All JSON files updated successfully"

      - name: Create or update Gitea release
        env:
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
          GITEA_URL: ${{ secrets.GITEA_URL }}
          GITEA_REPO: ${{ secrets.GITEA_REPO }}
          TAG_NAME: ${{ steps.release_info.outputs.tag_name }}
          RELEASE_NAME: ${{ steps.release_info.outputs.name }}
          RELEASE_BODY: ${{ steps.release_info.outputs.body }}
          IS_DRAFT: ${{ steps.release_info.outputs.draft }}
          IS_PRERELEASE: ${{ steps.release_info.outputs.prerelease }}
        run: |
          set -f
          
          echo "📦 Syncing release: $RELEASE_NAME ($TAG_NAME)"
          echo "🎯 Target: $GITEA_URL/$GITEA_REPO"
          
          # 检查 Gitea release 是否已存在
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /tmp/release.json \
            -H "Authorization: token $GITEA_TOKEN" \
            "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/tags/${TAG_NAME}")
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "⚠️  Release already exists, deleting old one..."
            RELEASE_ID=$(jq -r '.id' /tmp/release.json)
            DELETE_CODE=$(curl -s -w "%{http_code}" -o /dev/null -X DELETE \
              -H "Authorization: token $GITEA_TOKEN" \
              "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/${RELEASE_ID}")
            
            if [ "$DELETE_CODE" != "204" ]; then
              echo "❌ Failed to delete old release (HTTP $DELETE_CODE)"
              exit 1
            fi
            echo "✅ Old release deleted"
          fi
          
          # 准备 JSON payload，正确处理多行内容
          BODY_JSON=$(printf '%s' "$RELEASE_BODY" | jq -Rs .)
          
          # 创建新的 release
          echo "🚀 Creating new Gitea release..."
          CREATE_RESPONSE=$(curl -s -w "\n%{http_code}" \
            -H "Authorization: token $GITEA_TOKEN" \
            -H "Content-Type: application/json" \
            "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases" \
            -d @- <<EOF
          {
            "tag_name": "$TAG_NAME",
            "name": "$RELEASE_NAME",
            "body": $BODY_JSON,
            "draft": $IS_DRAFT,
            "prerelease": $IS_PRERELEASE
          }
          EOF
          )
          
          # 分离响应体和状态码
          HTTP_CODE=$(echo "$CREATE_RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$CREATE_RESPONSE" | sed '$d')
          
          if [ "$HTTP_CODE" != "201" ]; then
            echo "❌ Failed to create release (HTTP $HTTP_CODE)"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi
          
          GITEA_RELEASE_ID=$(echo "$RESPONSE_BODY" | jq -r '.id')
          echo "✅ Created Gitea release with ID: $GITEA_RELEASE_ID"
          
          # 上传所有 assets
          echo "📤 Uploading assets..."
          
          # 创建临时文件存储计数
          SUCCESS_COUNT=0
          FAILED_COUNT=0
          
          # 获取所有文件列表（不使用通配符）
          ASSET_FILES=$(find release-assets -type f -maxdepth 1 2>/dev/null)
          
          if [ -z "$ASSET_FILES" ]; then
            echo "⚠️  No assets found in release-assets/"
          else
            # 使用数组而不是管道来避免子 shell 问题
            while IFS= read -r asset; do
              if [ -f "$asset" ]; then
                filename=$(basename "$asset")
                filesize=$(ls -lh "$asset" | awk '{print $5}')
                echo "  ⏳ Uploading $filename ($filesize)..."
                
                UPLOAD_CODE=$(curl -s -w "%{http_code}" -o /dev/null \
                  -H "Authorization: token $GITEA_TOKEN" \
                  -F "attachment=@${asset}" \
                  "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/${GITEA_RELEASE_ID}/assets?name=${filename}")
                
                if [ "$UPLOAD_CODE" == "201" ]; then
                  echo "  ✅ Uploaded $filename"
                  SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                else
                  echo "  ❌ Failed to upload $filename (HTTP $UPLOAD_CODE)"
                  FAILED_COUNT=$((FAILED_COUNT + 1))
                fi
              fi
            done <<< "$ASSET_FILES"
          fi
          
          echo ""
          echo "🎉 Successfully synced release to Gitea!"
          echo "📊 Summary:"
          echo "  - Release: $RELEASE_NAME"
          echo "  - Tag: $TAG_NAME"
          echo "  - Assets uploaded: $SUCCESS_COUNT"
          echo "  - Assets failed: $FAILED_COUNT"
          echo "  - URL: $GITEA_URL/$GITEA_REPO/releases/tag/$TAG_NAME"

