name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ëé∑ÂèñÂÆåÊï¥ÁöÑ git ÂéÜÂè≤ËÆ∞ÂΩï

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          shared-key: ${{ matrix.target }}
          cache-on-failure: true

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-${{ matrix.target }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-bun-
            ${{ runner.os }}-bun-

      - name: install frontend dependencies
        run: bun install

      - name: Generate release notes from git commits
        id: release_notes
        shell: bash
        run: |
          # Ëé∑Âèñ‰∏ä‰∏Ä‰∏™ÁâàÊú¨ÁöÑ tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # ÁîüÊàêÊèê‰∫§Êó•Âøó
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## üìù Êõ¥Êñ∞ÂÜÖÂÆπ" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s" --no-merges >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### üì¶ ÂÆâË£ÖËØ¥Êòé" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "ËØ∑‰ªé‰∏ãÊñπ Assets ‰∏≠‰∏ãËΩΩÈÄÇÂêàÊÇ®Á≥ªÁªüÁöÑÂÆâË£ÖÂåÖÔºö" >> $GITHUB_OUTPUT
          echo "- **macOS (Apple Silicon)**: \`*_aarch64.dmg\` Êàñ \`*.app.tar.gz\`" >> $GITHUB_OUTPUT
          echo "- **macOS (Intel)**: \`*_x64.dmg\` Êàñ \`*.app.tar.gz\`" >> $GITHUB_OUTPUT
          echo "- **Windows**: \`*.msi\` Êàñ \`*.exe\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### üîÑ Ëá™Âä®Êõ¥Êñ∞" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Â¶ÇÊûúÊÇ®Â∑≤ÂÆâË£ÖÊóßÁâàÊú¨ÔºåÂ∫îÁî®‰ºöËá™Âä®Ê£ÄÊµãÂπ∂ÊèêÁ§∫Êõ¥Êñ∞„ÄÇ" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: 'Watch Monkey v__VERSION__'
          releaseBody: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: true
          args: ${{ matrix.args }}

  sync-to-gitea:
    needs: publish-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest release info
        id: release_info
        run: |
          # Ëé∑ÂèñÊúÄÊñ∞ÁöÑ release ‰ø°ÊÅØ
          RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          
          echo "tag_name=$(echo $RELEASE_DATA | jq -r '.tag_name')" >> $GITHUB_OUTPUT
          echo "name=$(echo $RELEASE_DATA | jq -r '.name')" >> $GITHUB_OUTPUT
          echo "body=$(echo $RELEASE_DATA | jq -r '.body')" >> $GITHUB_OUTPUT
          echo "draft=$(echo $RELEASE_DATA | jq -r '.draft')" >> $GITHUB_OUTPUT
          echo "prerelease=$(echo $RELEASE_DATA | jq -r '.prerelease')" >> $GITHUB_OUTPUT
          
          # ‰øùÂ≠ò release ID Áî®‰∫éÂêéÁª≠‰∏ãËΩΩ assets
          echo "release_id=$(echo $RELEASE_DATA | jq -r '.id')" >> $GITHUB_OUTPUT

      - name: Download release assets
        run: |
          mkdir -p release-assets
          
          # Ëé∑ÂèñÊâÄÊúâ assets
          ASSETS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.release_info.outputs.release_id }}/assets")
          
          # ‰∏ãËΩΩÊØè‰∏™ asset
          echo "$ASSETS" | jq -r '.[] | "\(.id) \(.name)"' | while read asset_id asset_name; do
            echo "Downloading $asset_name..."
            curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/octet-stream" \
              "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id" \
              -o "release-assets/$asset_name"
          done
          
          ls -lh release-assets/

      - name: Create or update Gitea release
        env:
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
          GITEA_URL: ${{ secrets.GITEA_URL }}
          GITEA_REPO: ${{ secrets.GITEA_REPO }}
        run: |
          TAG_NAME="${{ steps.release_info.outputs.tag_name }}"
          RELEASE_NAME="${{ steps.release_info.outputs.name }}"
          RELEASE_BODY="${{ steps.release_info.outputs.body }}"
          IS_DRAFT="${{ steps.release_info.outputs.draft }}"
          IS_PRERELEASE="${{ steps.release_info.outputs.prerelease }}"
          
          # Ê£ÄÊü• Gitea release ÊòØÂê¶Â∑≤Â≠òÂú®
          EXISTING_RELEASE=$(curl -s -w "%{http_code}" -o /tmp/release.json \
            -H "Authorization: token $GITEA_TOKEN" \
            "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/tags/${TAG_NAME}")
          
          if [ "${EXISTING_RELEASE: -3}" == "200" ]; then
            echo "Release already exists, deleting old one..."
            RELEASE_ID=$(jq -r '.id' /tmp/release.json)
            curl -X DELETE \
              -H "Authorization: token $GITEA_TOKEN" \
              "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/${RELEASE_ID}"
          fi
          
          # ÂàõÂª∫Êñ∞ÁöÑ release
          echo "Creating new Gitea release..."
          CREATE_RESPONSE=$(curl -X POST \
            -H "Authorization: token $GITEA_TOKEN" \
            -H "Content-Type: application/json" \
            "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases" \
            -d @- <<EOF
          {
            "tag_name": "${TAG_NAME}",
            "name": "${RELEASE_NAME}",
            "body": $(echo "$RELEASE_BODY" | jq -Rs .),
            "draft": ${IS_DRAFT},
            "prerelease": ${IS_PRERELEASE}
          }
          EOF
          )
          
          GITEA_RELEASE_ID=$(echo "$CREATE_RESPONSE" | jq -r '.id')
          echo "Created Gitea release with ID: $GITEA_RELEASE_ID"
          
          # ‰∏ä‰º†ÊâÄÊúâ assets
          for asset in release-assets/*; do
            if [ -f "$asset" ]; then
              filename=$(basename "$asset")
              echo "Uploading $filename..."
              curl -X POST \
                -H "Authorization: token $GITEA_TOKEN" \
                -F "attachment=@${asset}" \
                "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/${GITEA_RELEASE_ID}/assets?name=${filename}"
            fi
          done
          
          echo "‚úÖ Successfully synced release to Gitea!"

