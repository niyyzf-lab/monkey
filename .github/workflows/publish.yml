name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'
          - platform: 'ubuntu-latest' # for Android
            args: '--target aarch64-linux-android'
            target: 'aarch64-linux-android'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的 git 历史记录

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # macOS: 两个架构；Android: 只需要 ARM64；Windows: 使用默认
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform == 'ubuntu-latest' && 'aarch64-linux-android' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          # Android 使用特定的缓存键（只包含 aarch64）
          shared-key: ${{ matrix.platform == 'ubuntu-latest' && 'android-aarch64' || matrix.target }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          cache-on-failure: true
          # 设置缓存过期时间,避免缓存过大
          save-if: ${{ github.ref == 'refs/heads/release' }}
          # 增加 Android 构建的缓存目录
          cache-directories: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-${{ matrix.target }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-bun-
            ${{ runner.os }}-bun-

      - name: install frontend dependencies
        run: bun install

      - name: Setup Android SDK
        if: matrix.platform == 'ubuntu-latest'
        uses: android-actions/setup-android@v3

      - name: Install Java
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle dependencies
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('src-tauri/gen/android/**/*.gradle*', 'src-tauri/gen/android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Android build output
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/cache@v4
        with:
          path: |
            src-tauri/gen/android/.gradle
            src-tauri/gen/android/app/build
            src-tauri/gen/android/build
          key: ${{ runner.os }}-android-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-build-

      - name: Cache Android NDK
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/cache@v4
        id: ndk-cache
        with:
          path: ${{ env.ANDROID_HOME }}/ndk/27.0.12077973
          key: ${{ runner.os }}-ndk-27.0.12077973
          restore-keys: |
            ${{ runner.os }}-ndk-

      - name: Setup Android NDK
        if: matrix.platform == 'ubuntu-latest' && steps.ndk-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "📦 Downloading Android NDK..."
          sdkmanager "ndk;27.0.12077973"

      - name: Configure Android NDK environment
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          # Tauri 需要 NDK_HOME 环境变量
          echo "NDK_HOME=$ANDROID_HOME/ndk/27.0.12077973" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/27.0.12077973" >> $GITHUB_ENV
          echo "$ANDROID_HOME/ndk/27.0.12077973/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          echo "CC_aarch64_linux_android=aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "CXX_aarch64_linux_android=aarch64-linux-android21-clang++" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "✅ Android NDK configured"

      - name: Setup Android signing
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          cd src-tauri/gen/android
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties
          
          echo "✅ Android signing configured"
          cat keystore.properties | sed 's/password=.*/password=***/'

      - name: Set environment variables for build
        shell: bash
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL || 'http://localhost:5678' }}" >> $GITHUB_ENV
          echo "✅ Set VITE_API_BASE_URL for build process"

      - name: Get version from package.json
        id: get_version
        shell: bash
        run: |
          VERSION=$(cat package.json | grep '"version"' | head -1 | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: Generate release notes from git commits
        id: release_notes
        shell: bash
        run: |
          # 获取上一个版本的 tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # 生成提交日志
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## 📝 更新内容" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s" --no-merges >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 📦 安装说明" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "请从下方 Assets 中下载适合您系统的安装包：" >> $GITHUB_OUTPUT
          echo "- **macOS (Apple Silicon)**: 下载包含 \`aarch64\` 的 \`.dmg\` 或 \`.app.tar.gz\` 文件" >> $GITHUB_OUTPUT
          echo "- **macOS (Intel)**: 下载包含 \`x64\` 的 \`.dmg\` 或 \`.app.tar.gz\` 文件" >> $GITHUB_OUTPUT
          echo "- **Windows**: 下载 \`.msi\` 或 \`.exe\` 安装文件" >> $GITHUB_OUTPUT
          echo "- **Android**: 下载 \`.apk\` 文件" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 🔄 自动更新" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "如果您已安装旧版本，应用会自动检测并提示更新。" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Android 使用 Tauri 的 android build 命令（仅 ARM64）
      - name: Build Android APK
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'http://localhost:5678' }}
        run: |
          echo "🤖 Building Android APK (ARM64 only)..."
          # --ci: 非交互模式，跳过提示
          # --apk: 构建 APK 文件
          # --target: 只构建 ARM64 架构（现代 Android 设备）
          bun tauri android build --ci --apk --target aarch64
          
          echo "✅ Android APK built successfully"
          echo "📦 Generated APK files:"
          find src-tauri/gen/android/app/build/outputs/apk -name "*.apk" -type f -exec ls -lh {} \;

      # 桌面平台使用 tauri-action（构建 + 生成 updater JSON，但不发布）
      - uses: tauri-apps/tauri-action@v0
        if: matrix.platform != 'ubuntu-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          # Vite 环境变量 - 构建时注入
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'http://localhost:5678' }}
        with:
          tagName: ${{ steps.get_version.outputs.tag_name }}
          releaseName: 'Watch Monkey ${{ steps.get_version.outputs.tag_name }}'
          releaseBody: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          releaseDraft: true  # 草稿模式：生成文件但不发布
          prerelease: false
          includeUpdaterJson: true  # 生成 latest.json
          args: ${{ matrix.args }}

      # 收集构建产物
      - name: Collect build artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          
          if [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
            # Android APK
            echo "📦 Collecting Android APK..."
            find src-tauri/gen/android/app/build/outputs/apk -name "*.apk" -type f -exec cp {} artifacts/ \;
          else
            # 桌面平台构建产物
            echo "📦 Collecting desktop build artifacts..."
            echo "Looking in: src-tauri/target/${{ matrix.target }}/release/bundle"
            
            # 尝试两种可能的路径结构
            # 1. 带 target 架构的路径（macOS 交叉编译）
            if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle" ]; then
              find src-tauri/target/${{ matrix.target }}/release/bundle -type f \( -name "*.dmg" -o -name "*.app.tar.gz" -o -name "*.msi" -o -name "*.exe" -o -name "*.json" -o -name "*.sig" \) -exec cp {} artifacts/ \; 2>/dev/null || true
            fi
            
            # 2. 不带 target 架构的路径（Windows/Linux 本地编译）
            if [ -d "src-tauri/target/release/bundle" ]; then
              echo "Also looking in: src-tauri/target/release/bundle"
              find src-tauri/target/release/bundle -type f \( -name "*.dmg" -o -name "*.app.tar.gz" -o -name "*.msi" -o -name "*.exe" -o -name "*.json" -o -name "*.sig" \) -exec cp {} artifacts/ \; 2>/dev/null || true
            fi
            
            # 3. 收集 updater JSON 文件（latest.json 等）
            # tauri-action 会生成这些文件在根目录或特定位置
            if [ -f "src-tauri/target/${{ matrix.target }}/release/bundle/macos/latest.json" ]; then
              cp src-tauri/target/${{ matrix.target }}/release/bundle/macos/latest.json artifacts/ 2>/dev/null || true
            fi
            if [ -f "src-tauri/target/release/latest.json" ]; then
              cp src-tauri/target/release/latest.json artifacts/ 2>/dev/null || true
            fi
            
            # 查找所有可能的 updater JSON 文件
            find src-tauri/target -name "latest.json" -o -name "*-updater.json" 2>/dev/null | while read json_file; do
              echo "Found updater JSON: $json_file"
              cp "$json_file" artifacts/ 2>/dev/null || true
            done
          fi
          
          echo "✅ Collected artifacts:"
          ls -lh artifacts/
          
          # 检查是否收集到文件
          if [ -z "$(ls -A artifacts/)" ]; then
            echo "❌ Error: No artifacts collected!"
            echo "Available files:"
            find src-tauri/target -name "*.msi" -o -name "*.exe" -o -name "*.dmg" -o -name "*.app.tar.gz" 2>/dev/null || true
            exit 1
          fi

      # 上传构建产物为 GitHub Actions Artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: artifacts/*
          retention-days: 1
          if-no-files-found: error

  # 所有平台构建完成后，统一创建 Release 并推送
  create-release:
    needs: publish-tauri
    runs-on: ubuntu-latest
    if: always() && !cancelled()
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from package.json
        id: get_version
        shell: bash
        run: |
          VERSION=$(cat package.json | grep '"version"' | head -1 | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: Generate release notes from git commits
        id: release_notes
        shell: bash
        run: |
          # 获取上一个版本的 tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # 生成提交日志
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## 📝 更新内容" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s" --no-merges >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 📦 安装说明" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "请从下方 Assets 中下载适合您系统的安装包：" >> $GITHUB_OUTPUT
          echo "- **macOS (Apple Silicon)**: 下载包含 \`aarch64\` 的 \`.dmg\` 或 \`.app.tar.gz\` 文件" >> $GITHUB_OUTPUT
          echo "- **macOS (Intel)**: 下载包含 \`x64\` 的 \`.dmg\` 或 \`.app.tar.gz\` 文件" >> $GITHUB_OUTPUT
          echo "- **Windows**: 下载 \`.msi\` 或 \`.exe\` 安装文件" >> $GITHUB_OUTPUT
          echo "- **Android**: 下载 \`.apk\` 文件" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 🔄 自动更新" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "如果您已安装旧版本，应用会自动检测并提示更新。" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 下载所有平台的构建产物
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          pattern: build-*
          merge-multiple: true

      - name: List downloaded artifacts
        shell: bash
        run: |
          echo "📦 Downloaded artifacts:"
          ls -lh release-assets/
          echo ""
          echo "Total files: $(find release-assets -type f | wc -l)"

      # 从草稿 Release 下载 tauri-action 生成的文件（如 latest.json）
      - name: Download files from draft releases
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ steps.get_version.outputs.tag_name }}
        run: |
          echo "📥 Checking for draft releases created by tauri-action..."
          
          # 获取所有草稿 Release
          DRAFTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          
          # 查找匹配当前 tag 的草稿 Release
          echo "$DRAFTS" | jq -r '.[] | select(.draft == true and .tag_name == env.TAG_NAME) | .id' | while read draft_id; do
            echo "Found draft release: $draft_id"
            
            # 获取草稿 Release 的所有 assets
            ASSETS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$draft_id/assets")
            
            # 下载所有 assets（尤其是 latest.json）
            echo "$ASSETS" | jq -r '.[] | "\(.id) \(.name)"' | while read asset_id asset_name; do
              echo "  📥 Downloading $asset_name from draft..."
              curl -L -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/octet-stream" \
                "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id" \
                -o "release-assets/$asset_name"
            done
            
            # 删除草稿 Release
            echo "🗑️  Deleting draft release $draft_id..."
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$draft_id"
          done
          
          echo ""
          echo "✅ Final artifacts list:"
          ls -lh release-assets/

      # 创建 GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          name: 'Watch Monkey ${{ steps.get_version.outputs.tag_name }}'
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 同步到 Gitea
      - name: Update URLs in JSON files
        shell: bash
        env:
          TAG_NAME: ${{ steps.get_version.outputs.tag_name }}
          GITEA_URL: ${{ secrets.GITEA_URL }}
          GITEA_REPO: ${{ secrets.GITEA_REPO }}
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
        run: |
          # 获取 GitHub 仓库信息
          GITHUB_REPO="${{ github.repository }}"
          
          echo "📝 Replacing GitHub URLs with Gitea URLs in JSON files..."
          
          # 处理所有 JSON 文件
          find release-assets -name "*.json" -type f | while read -r json_file; do
            echo "  📝 Processing $(basename "$json_file")..."
            
            # 替换 GitHub 下载 URL 为 Gitea URL，并添加访问 token
            if [ -n "$GITEA_TOKEN" ]; then
              # 如果配置了 token，在 URL 后面添加 token
              sed -i.bak \
                "s|https://github.com/${GITHUB_REPO}/releases/download/|${GITEA_URL}/${GITEA_REPO}/releases/download/|g; \
                 s|\(${GITEA_URL}/${GITEA_REPO}/releases/download/[^\"]*\)|\1?token=${GITEA_TOKEN}|g" \
                "$json_file"
            else
              # 如果没有配置 token，只替换 URL
              sed -i.bak \
                "s|https://github.com/${GITHUB_REPO}/releases/download/|${GITEA_URL}/${GITEA_REPO}/releases/download/|g" \
                "$json_file"
            fi
            
            # 删除备份文件
            rm -f "${json_file}.bak"
            
            echo "  ✅ Updated $(basename "$json_file")"
          done
          
          echo "✅ All JSON files updated successfully"

      - name: Sync to Gitea
        shell: bash
        env:
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
          GITEA_URL: ${{ secrets.GITEA_URL }}
          GITEA_REPO: ${{ secrets.GITEA_REPO }}
          TAG_NAME: ${{ steps.get_version.outputs.tag_name }}
          RELEASE_NAME: 'Watch Monkey ${{ steps.get_version.outputs.tag_name }}'
          RELEASE_BODY: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        run: |
          set -f
          
          # 如果没有配置 Gitea，跳过
          if [ -z "$GITEA_TOKEN" ] || [ -z "$GITEA_URL" ] || [ -z "$GITEA_REPO" ]; then
            echo "⚠️  Gitea not configured, skipping sync"
            exit 0
          fi
          
          echo "🚀 Syncing release to Gitea: $RELEASE_NAME ($TAG_NAME)"
          echo "Target: $GITEA_URL/$GITEA_REPO"
          
          # 检查 Gitea release 是否已存在
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /tmp/release.json \
            -H "Authorization: token $GITEA_TOKEN" \
            "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/tags/${TAG_NAME}")
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "⚠️  Release already exists, deleting old one..."
            RELEASE_ID=$(jq -r '.id' /tmp/release.json)
            DELETE_CODE=$(curl -s -w "%{http_code}" -o /dev/null -X DELETE \
              -H "Authorization: token $GITEA_TOKEN" \
              "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/${RELEASE_ID}")
            
            if [ "$DELETE_CODE" != "204" ]; then
              echo "❌ Failed to delete old release (HTTP $DELETE_CODE)"
              exit 1
            fi
            echo "✅ Old release deleted"
          fi
          
          # 准备 JSON payload，正确处理多行内容
          BODY_JSON=$(printf '%s' "$RELEASE_BODY" | jq -Rs .)
          
          # 创建新的 release
          echo "📝 Creating new Gitea release..."
          CREATE_RESPONSE=$(curl -s -w "\n%{http_code}" \
            -H "Authorization: token $GITEA_TOKEN" \
            -H "Content-Type: application/json" \
            "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases" \
            -d @- <<EOF
          {
            "tag_name": "$TAG_NAME",
            "name": "$RELEASE_NAME",
            "body": $BODY_JSON,
            "draft": false,
            "prerelease": false
          }
          EOF
          )
          
          # 分离响应体和状态码
          HTTP_CODE=$(echo "$CREATE_RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$CREATE_RESPONSE" | sed '$d')
          
          if [ "$HTTP_CODE" != "201" ]; then
            echo "❌ Failed to create release (HTTP $HTTP_CODE)"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi
          
          GITEA_RELEASE_ID=$(echo "$RESPONSE_BODY" | jq -r '.id')
          echo "✅ Created Gitea release with ID: $GITEA_RELEASE_ID"
          
          # 上传所有 assets
          echo "📦 Uploading assets..."
          
          # 创建临时文件存储计数
          SUCCESS_COUNT=0
          FAILED_COUNT=0
          
          # 获取所有文件列表（不使用通配符）
          ASSET_FILES=$(find release-assets -type f -maxdepth 1 2>/dev/null)
          
          if [ -z "$ASSET_FILES" ]; then
            echo "⚠️  No assets found in release-assets/"
          else
            # 使用数组而不是管道来避免子 shell 问题
            while IFS= read -r asset; do
              if [ -f "$asset" ]; then
                filename=$(basename "$asset")
                filesize=$(ls -lh "$asset" | awk '{print $5}')
                echo "  ⏳ Uploading $filename ($filesize)..."
                
                UPLOAD_CODE=$(curl -s -w "%{http_code}" -o /dev/null \
                  -H "Authorization: token $GITEA_TOKEN" \
                  -F "attachment=@${asset}" \
                  "${GITEA_URL}/api/v1/repos/${GITEA_REPO}/releases/${GITEA_RELEASE_ID}/assets?name=${filename}")
                
                if [ "$UPLOAD_CODE" == "201" ]; then
                  echo "  ✅ Uploaded $filename"
                  SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                else
                  echo "  ❌ Failed to upload $filename (HTTP $UPLOAD_CODE)"
                  FAILED_COUNT=$((FAILED_COUNT + 1))
                fi
              fi
            done <<< "$ASSET_FILES"
          fi
          
          echo ""
          echo "🎉 Successfully synced release to Gitea!"
          echo "📊 Summary:"
          echo "  - Release: $RELEASE_NAME"
          echo "  - Tag: $TAG_NAME"
          echo "  - Assets uploaded: $SUCCESS_COUNT"
          echo "  - Assets failed: $FAILED_COUNT"
          echo "  - URL: $GITEA_URL/$GITEA_REPO/releases/tag/$TAG_NAME"
