name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ëé∑ÂèñÂÆåÊï¥ÁöÑ git ÂéÜÂè≤ËÆ∞ÂΩï

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          shared-key: ${{ matrix.target }}
          cache-on-failure: true

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-${{ matrix.target }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-bun-
            ${{ runner.os }}-bun-

      - name: install frontend dependencies
        run: bun install

      - name: Generate release notes from git commits
        id: release_notes
        shell: bash
        run: |
          # Ëé∑Âèñ‰∏ä‰∏Ä‰∏™ÁâàÊú¨ÁöÑ tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # ÁîüÊàêÊèê‰∫§Êó•Âøó
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## üìù Êõ¥Êñ∞ÂÜÖÂÆπ" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s" --no-merges >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### üì¶ ÂÆâË£ÖËØ¥Êòé" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "ËØ∑‰ªé‰∏ãÊñπ Assets ‰∏≠‰∏ãËΩΩÈÄÇÂêàÊÇ®Á≥ªÁªüÁöÑÂÆâË£ÖÂåÖÔºö" >> $GITHUB_OUTPUT
          echo "- **macOS (Apple Silicon)**: \`*_aarch64.dmg\` Êàñ \`*.app.tar.gz\`" >> $GITHUB_OUTPUT
          echo "- **macOS (Intel)**: \`*_x64.dmg\` Êàñ \`*.app.tar.gz\`" >> $GITHUB_OUTPUT
          echo "- **Windows**: \`*.msi\` Êàñ \`*.exe\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### üîÑ Ëá™Âä®Êõ¥Êñ∞" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Â¶ÇÊûúÊÇ®Â∑≤ÂÆâË£ÖÊóßÁâàÊú¨ÔºåÂ∫îÁî®‰ºöËá™Âä®Ê£ÄÊµãÂπ∂ÊèêÁ§∫Êõ¥Êñ∞„ÄÇ" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: 'Watch Monkey v__VERSION__'
          releaseBody: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: true
          args: ${{ matrix.args }}

