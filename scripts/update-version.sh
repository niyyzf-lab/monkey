#!/bin/bash

# ‰∫§‰∫íÂºèÁâàÊú¨Âè∑Êõ¥Êñ∞ËÑöÊú¨

set -e  # ÈÅáÂà∞ÈîôËØØÁ´ãÂç≥ÈÄÄÂá∫

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo ""
echo "================================================"
echo "         üì¶ ‰∫§‰∫íÂºèÁâàÊú¨Âè∑Êõ¥Êñ∞Â∑•ÂÖ∑"
echo "================================================"
echo ""

# ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ
TAURI_CONF="src-tauri/tauri.conf.json"
PACKAGE_JSON="package.json"

# ============================================
# ËØªÂèñÂΩìÂâçÁâàÊú¨Âè∑
# ============================================
CURRENT_VERSION=""

if [ -f "$TAURI_CONF" ]; then
    if command -v jq &> /dev/null; then
        CURRENT_VERSION=$(jq -r '.version' "$TAURI_CONF" 2>/dev/null)
    else
        CURRENT_VERSION=$(grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' "$TAURI_CONF" | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
    fi
fi

# Â¶ÇÊûú‰ªé tauri.conf.json ËØªÂèñÂ§±Ë¥•ÔºåÂ∞ùËØï‰ªé package.json ËØªÂèñ
if [ -z "$CURRENT_VERSION" ] || [ "$CURRENT_VERSION" = "null" ]; then
    if [ -f "$PACKAGE_JSON" ]; then
        if command -v jq &> /dev/null; then
            CURRENT_VERSION=$(jq -r '.version' "$PACKAGE_JSON" 2>/dev/null)
        else
            CURRENT_VERSION=$(grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' "$PACKAGE_JSON" | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
        fi
    fi
fi

if [ -z "$CURRENT_VERSION" ] || [ "$CURRENT_VERSION" = "null" ]; then
    echo -e "${RED}‚ùå ÈîôËØØ: Êó†Ê≥ïËØªÂèñÂΩìÂâçÁâàÊú¨Âè∑${NC}"
    echo ""
    echo "   ËØ∑Ê£ÄÊü•‰ª•‰∏ãÊñá‰ª∂ÊòØÂê¶Â≠òÂú®Ôºö"
    echo "   ‚Ä¢ $TAURI_CONF"
    echo "   ‚Ä¢ $PACKAGE_JSON"
    echo ""
    exit 1
fi

echo -e "${CYAN}üìã ÂΩìÂâçÈÖçÁΩÆ‰ø°ÊÅØ:${NC}"
echo ""
echo "   ÂΩìÂâçÁâàÊú¨: $CURRENT_VERSION"
echo "   Tauri ÈÖçÁΩÆ: $TAURI_CONF"
echo "   Package ÈÖçÁΩÆ: $PACKAGE_JSON"
echo ""

# ============================================
# ËÆ°ÁÆóÂª∫ËÆÆÁöÑÁâàÊú¨Âè∑
# ============================================
suggest_versions() {
    local current=$1
    if [[ $current =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
        local major="${BASH_REMATCH[1]}"
        local minor="${BASH_REMATCH[2]}"
        local patch="${BASH_REMATCH[3]}"
        
        SUGGESTED_PATCH="$major.$minor.$((patch + 1))"
        SUGGESTED_MINOR="$major.$((minor + 1)).0"
        SUGGESTED_MAJOR="$((major + 1)).0.0"
    else
        echo -e "${RED}‚ùå ÈîôËØØ: ÁâàÊú¨Âè∑Ê†ºÂºè‰∏çÊ≠£Á°Æ (Â∫î‰∏∫ x.y.z)${NC}"
        exit 1
    fi
}

# ËÆ°ÁÆóÂª∫ËÆÆÁâàÊú¨
suggest_versions "$CURRENT_VERSION"

# ============================================
# ‰∫§‰∫íÂºèÈÄâÊã©Êñ∞ÁâàÊú¨Âè∑
# ============================================
NEW_VERSION=""

if [ -n "$1" ]; then
    # Â¶ÇÊûúÊèê‰æõ‰∫ÜÂëΩ‰ª§Ë°åÂèÇÊï∞ÔºåÁõ¥Êé•‰ΩøÁî®
    NEW_VERSION=$1
    echo -e "${YELLOW}üí° ‰ΩøÁî®ÂëΩ‰ª§Ë°åÂèÇÊï∞ÊåáÂÆöÁöÑÁâàÊú¨: $NEW_VERSION${NC}"
    echo ""
else
    # ‰∫§‰∫íÂºèÈÄâÊã©
    echo -e "${YELLOW}üí° ÁâàÊú¨ÂçáÁ∫ßÈÄâÈ°π:${NC}"
    echo ""
    echo "   [1] üêõ Ë°•‰∏ÅÁâàÊú¨ (Patch): $SUGGESTED_PATCH"
    echo "       ‚îî‚îÄ Áî®‰∫é: Bug ‰øÆÂ§ç„ÄÅÂ∞èÊîπËøõ"
    echo ""
    echo "   [2] ‚ú® Ê¨°ÁâàÊú¨ (Minor):  $SUGGESTED_MINOR"
    echo "       ‚îî‚îÄ Áî®‰∫é: Êñ∞ÂäüËÉΩ„ÄÅÂêëÂêéÂÖºÂÆπÁöÑÊõ¥Êîπ"
    echo ""
    echo "   [3] üöÄ ‰∏ªÁâàÊú¨ (Major):  $SUGGESTED_MAJOR"
    echo "       ‚îî‚îÄ Áî®‰∫é: ÈáçÂ§ßÊõ¥Êñ∞„ÄÅÁ†¥ÂùèÊÄßÊõ¥Êîπ"
    echo ""
    echo "   [0] ‚úèÔ∏è  Ëá™ÂÆö‰πâÁâàÊú¨"
    echo ""
    
    read -p "üì¶ ËØ∑ÈÄâÊã©ÁâàÊú¨Á±ªÂûã (1/2/3/0) [ÈªòËÆ§: 1]: " VERSION_CHOICE
    VERSION_CHOICE=${VERSION_CHOICE:-1}
    
    case "$VERSION_CHOICE" in
        "1")
            NEW_VERSION=$SUGGESTED_PATCH
            echo -e "${GREEN}‚úì ÈÄâÊã©Ë°•‰∏ÅÁâàÊú¨: $NEW_VERSION${NC}"
            ;;
        "2")
            NEW_VERSION=$SUGGESTED_MINOR
            echo -e "${GREEN}‚úì ÈÄâÊã©Ê¨°ÁâàÊú¨: $NEW_VERSION${NC}"
            ;;
        "3")
            NEW_VERSION=$SUGGESTED_MAJOR
            echo -e "${GREEN}‚úì ÈÄâÊã©‰∏ªÁâàÊú¨: $NEW_VERSION${NC}"
            ;;
        "0")
            echo ""
            read -p "   ‚úèÔ∏è  ËØ∑ËæìÂÖ•Ëá™ÂÆö‰πâÁâàÊú¨Âè∑: " NEW_VERSION
            if [ -z "$NEW_VERSION" ]; then
                echo -e "${RED}‚ùå ÈîôËØØ: ÁâàÊú¨Âè∑‰∏çËÉΩ‰∏∫Á©∫${NC}"
                exit 1
            fi
            ;;
        *)
            # Â¶ÇÊûúÁõ¥Êé•ËæìÂÖ•‰∫ÜÁâàÊú¨Âè∑
            if [[ "$VERSION_CHOICE" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                NEW_VERSION=$VERSION_CHOICE
                echo -e "${GREEN}‚úì ‰ΩøÁî®ËæìÂÖ•ÁöÑÁâàÊú¨: $NEW_VERSION${NC}"
            else
                echo -e "${RED}‚ùå ÈîôËØØ: Êó†ÊïàÁöÑÈÄâÊã©ÊàñÁâàÊú¨Âè∑Ê†ºÂºè${NC}"
                exit 1
            fi
            ;;
    esac
fi

echo ""

# È™åËØÅÁâàÊú¨Âè∑Ê†ºÂºè
if [[ ! "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo -e "${RED}‚ùå ÈîôËØØ: ÁâàÊú¨Âè∑Ê†ºÂºè‰∏çÊ≠£Á°Æ${NC}"
    echo "   Â∫îËØ•ÊòØ x.y.z Ê†ºÂºèÔºå‰æãÂ¶Ç: 1.2.3"
    echo ""
    exit 1
fi

# Ê£ÄÊü•ÁâàÊú¨Âè∑ÊòØÂê¶ÊúâÂèòÂåñ
if [ "$NEW_VERSION" = "$CURRENT_VERSION" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Ë≠¶Âëä: Êñ∞ÁâàÊú¨Âè∑‰∏éÂΩìÂâçÁâàÊú¨Áõ∏Âêå${NC}"
    echo ""
    read -p "ÊòØÂê¶ÁªßÁª≠Ôºü(y/N): " CONTINUE_SAME
    if [[ ! "$CONTINUE_SAME" =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}Â∑≤ÂèñÊ∂àÊõ¥Êñ∞${NC}"
        exit 0
    fi
    echo ""
fi

# ============================================
# ÊòæÁ§∫Êõ¥Êñ∞È¢ÑËßà
# ============================================
echo "================================================"
echo -e "${CYAN}üìù Êõ¥Êñ∞È¢ÑËßà${NC}"
echo "================================================"
echo ""
echo -e "   ${YELLOW}ÊóßÁâàÊú¨:${NC} $CURRENT_VERSION"
echo -e "   ${GREEN}Êñ∞ÁâàÊú¨:${NC} $NEW_VERSION"
echo ""
echo "   Â∞ÜÊõ¥Êñ∞‰ª•‰∏ãÊñá‰ª∂:"
if [ -f "$TAURI_CONF" ]; then
    echo "   ‚úì $TAURI_CONF"
fi
if [ -f "$PACKAGE_JSON" ]; then
    echo "   ‚úì $PACKAGE_JSON"
fi
echo ""

# ÊúÄÂêéÁ°ÆËÆ§
read -p "Á°ÆËÆ§Êõ¥Êñ∞ÁâàÊú¨Âè∑Ôºü(Y/n): " CONFIRM
CONFIRM=${CONFIRM:-Y}
if [[ ! "$CONFIRM" =~ ^[Yy]$ ]]; then
    echo -e "${BLUE}Â∑≤ÂèñÊ∂àÊõ¥Êñ∞${NC}"
    exit 0
fi

echo ""

# ============================================
# ÊâßË°åÊõ¥Êñ∞
# ============================================
echo "================================================"
echo -e "${CYAN}üîÑ Ê≠£Âú®Êõ¥Êñ∞ÁâàÊú¨Âè∑...${NC}"
echo "================================================"
echo ""

UPDATE_SUCCESS=0
UPDATE_FAILED=0

# Êõ¥Êñ∞ tauri.conf.json
if [ -f "$TAURI_CONF" ]; then
    echo -e "${BLUE}[1/2] Êõ¥Êñ∞ $TAURI_CONF...${NC}"
    
    # ÂàõÂª∫Â§á‰ªΩ
    cp "$TAURI_CONF" "${TAURI_CONF}.backup"
    
    if command -v jq &> /dev/null; then
        TMP_FILE=$(mktemp)
        if jq --arg version "$NEW_VERSION" '.version = $version' "$TAURI_CONF" > "$TMP_FILE"; then
            mv "$TMP_FILE" "$TAURI_CONF"
            echo -e "${GREEN}   ‚úÖ Â∑≤Êõ¥Êñ∞ tauri.conf.json${NC}"
            UPDATE_SUCCESS=$((UPDATE_SUCCESS + 1))
        else
            echo -e "${RED}   ‚ùå Êõ¥Êñ∞Â§±Ë¥•${NC}"
            mv "${TAURI_CONF}.backup" "$TAURI_CONF"
            UPDATE_FAILED=$((UPDATE_FAILED + 1))
        fi
    else
        if [[ "$OSTYPE" == "darwin"* ]]; then
            if sed -i '' "s/\"version\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" "$TAURI_CONF"; then
                echo -e "${GREEN}   ‚úÖ Â∑≤Êõ¥Êñ∞ tauri.conf.json${NC}"
                UPDATE_SUCCESS=$((UPDATE_SUCCESS + 1))
            else
                echo -e "${RED}   ‚ùå Êõ¥Êñ∞Â§±Ë¥•${NC}"
                mv "${TAURI_CONF}.backup" "$TAURI_CONF"
                UPDATE_FAILED=$((UPDATE_FAILED + 1))
            fi
        else
            if sed -i "s/\"version\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" "$TAURI_CONF"; then
                echo -e "${GREEN}   ‚úÖ Â∑≤Êõ¥Êñ∞ tauri.conf.json${NC}"
                UPDATE_SUCCESS=$((UPDATE_SUCCESS + 1))
            else
                echo -e "${RED}   ‚ùå Êõ¥Êñ∞Â§±Ë¥•${NC}"
                mv "${TAURI_CONF}.backup" "$TAURI_CONF"
                UPDATE_FAILED=$((UPDATE_FAILED + 1))
            fi
        fi
    fi
    
    # È™åËØÅÊõ¥Êñ∞
    if command -v jq &> /dev/null; then
        VERIFY_VERSION=$(jq -r '.version' "$TAURI_CONF" 2>/dev/null)
    else
        VERIFY_VERSION=$(grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' "$TAURI_CONF" | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
    fi
    
    if [ "$VERIFY_VERSION" = "$NEW_VERSION" ]; then
        echo -e "${GREEN}   ‚úì È™åËØÅÈÄöËøá: $VERIFY_VERSION${NC}"
        rm -f "${TAURI_CONF}.backup"
    else
        echo -e "${RED}   ‚úó È™åËØÅÂ§±Ë¥•: ÊúüÊúõ $NEW_VERSIONÔºåÂÆûÈôÖ $VERIFY_VERSION${NC}"
        mv "${TAURI_CONF}.backup" "$TAURI_CONF"
        UPDATE_FAILED=$((UPDATE_FAILED + 1))
        UPDATE_SUCCESS=$((UPDATE_SUCCESS - 1))
    fi
    
    echo ""
else
    echo -e "${YELLOW}‚ö†Ô∏è  Êú™ÊâæÂà∞ $TAURI_CONF${NC}"
    echo ""
fi

# Êõ¥Êñ∞ package.json
if [ -f "$PACKAGE_JSON" ]; then
    echo -e "${BLUE}[2/2] Êõ¥Êñ∞ $PACKAGE_JSON...${NC}"
    
    # ÂàõÂª∫Â§á‰ªΩ
    cp "$PACKAGE_JSON" "${PACKAGE_JSON}.backup"
    
    if command -v jq &> /dev/null; then
        TMP_FILE=$(mktemp)
        if jq --arg version "$NEW_VERSION" '.version = $version' "$PACKAGE_JSON" > "$TMP_FILE"; then
            mv "$TMP_FILE" "$PACKAGE_JSON"
            echo -e "${GREEN}   ‚úÖ Â∑≤Êõ¥Êñ∞ package.json${NC}"
            UPDATE_SUCCESS=$((UPDATE_SUCCESS + 1))
        else
            echo -e "${RED}   ‚ùå Êõ¥Êñ∞Â§±Ë¥•${NC}"
            mv "${PACKAGE_JSON}.backup" "$PACKAGE_JSON"
            UPDATE_FAILED=$((UPDATE_FAILED + 1))
        fi
    else
        if [[ "$OSTYPE" == "darwin"* ]]; then
            if sed -i '' "s/\"version\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" "$PACKAGE_JSON"; then
                echo -e "${GREEN}   ‚úÖ Â∑≤Êõ¥Êñ∞ package.json${NC}"
                UPDATE_SUCCESS=$((UPDATE_SUCCESS + 1))
            else
                echo -e "${RED}   ‚ùå Êõ¥Êñ∞Â§±Ë¥•${NC}"
                mv "${PACKAGE_JSON}.backup" "$PACKAGE_JSON"
                UPDATE_FAILED=$((UPDATE_FAILED + 1))
            fi
        else
            if sed -i "s/\"version\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" "$PACKAGE_JSON"; then
                echo -e "${GREEN}   ‚úÖ Â∑≤Êõ¥Êñ∞ package.json${NC}"
                UPDATE_SUCCESS=$((UPDATE_SUCCESS + 1))
            else
                echo -e "${RED}   ‚ùå Êõ¥Êñ∞Â§±Ë¥•${NC}"
                mv "${PACKAGE_JSON}.backup" "$PACKAGE_JSON"
                UPDATE_FAILED=$((UPDATE_FAILED + 1))
            fi
        fi
    fi
    
    # È™åËØÅÊõ¥Êñ∞
    if command -v jq &> /dev/null; then
        VERIFY_VERSION=$(jq -r '.version' "$PACKAGE_JSON" 2>/dev/null)
    else
        VERIFY_VERSION=$(grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' "$PACKAGE_JSON" | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
    fi
    
    if [ "$VERIFY_VERSION" = "$NEW_VERSION" ]; then
        echo -e "${GREEN}   ‚úì È™åËØÅÈÄöËøá: $VERIFY_VERSION${NC}"
        rm -f "${PACKAGE_JSON}.backup"
    else
        echo -e "${RED}   ‚úó È™åËØÅÂ§±Ë¥•: ÊúüÊúõ $NEW_VERSIONÔºåÂÆûÈôÖ $VERIFY_VERSION${NC}"
        mv "${PACKAGE_JSON}.backup" "$PACKAGE_JSON"
        UPDATE_FAILED=$((UPDATE_FAILED + 1))
        UPDATE_SUCCESS=$((UPDATE_SUCCESS - 1))
    fi
    
    echo ""
else
    echo -e "${YELLOW}‚ö†Ô∏è  Êú™ÊâæÂà∞ $PACKAGE_JSON${NC}"
    echo ""
fi

# ============================================
# ÊòæÁ§∫ÁªìÊûú
# ============================================
echo "================================================"
if [ $UPDATE_FAILED -eq 0 ] && [ $UPDATE_SUCCESS -gt 0 ]; then
    echo -e "${GREEN}‚úÖ ÁâàÊú¨Âè∑Êõ¥Êñ∞ÂÆåÊàêÔºÅ${NC}"
    echo "================================================"
    echo ""
    echo -e "${CYAN}üìä Êõ¥Êñ∞ÊëòË¶Å:${NC}"
    echo ""
    echo "   ‚Ä¢ ÊóßÁâàÊú¨: $CURRENT_VERSION"
    echo "   ‚Ä¢ Êñ∞ÁâàÊú¨: $NEW_VERSION"
    echo "   ‚Ä¢ Êõ¥Êñ∞Êñá‰ª∂: $UPDATE_SUCCESS ‰∏™"
    echo ""
    echo -e "${YELLOW}üîî ‰∏ã‰∏ÄÊ≠•Êìç‰Ωú:${NC}"
    echo ""
    echo "   1. Êèê‰∫§ÁâàÊú¨Êõ¥Êñ∞Ôºö"
    echo "      git add ."
    echo "      git commit -m \"chore: bump version to $NEW_VERSION\""
    echo ""
    echo "   2. ÂàõÂª∫ Git Ê†áÁ≠æÔºàÂèØÈÄâÔºâÔºö"
    echo "      git tag -a v$NEW_VERSION -m \"Release v$NEW_VERSION\""
    echo ""
    echo "   3. Êé®ÈÄÅÂà∞ËøúÁ®ãÔºö"
    echo "      git push origin main"
    echo "      git push origin v$NEW_VERSION"
    echo ""
    echo "   4. ÂêåÊ≠•Âà∞ release ÂàÜÊîØËß¶ÂèëÊûÑÂª∫Ôºö"
    echo "      bash scripts/sync-to-release.sh"
    echo ""
elif [ $UPDATE_FAILED -gt 0 ]; then
    echo -e "${RED}‚ùå ÁâàÊú¨Âè∑Êõ¥Êñ∞Â§±Ë¥•${NC}"
    echo "================================================"
    echo ""
    echo "   ÊàêÂäü: $UPDATE_SUCCESS ‰∏™Êñá‰ª∂"
    echo "   Â§±Ë¥•: $UPDATE_FAILED ‰∏™Êñá‰ª∂"
    echo ""
    echo "   Â∑≤ÊÅ¢Â§çÊâÄÊúâÂ§á‰ªΩÊñá‰ª∂"
    echo ""
    exit 1
else
    echo -e "${YELLOW}‚ö†Ô∏è  Ê≤°ÊúâÊñá‰ª∂Ë¢´Êõ¥Êñ∞${NC}"
    echo "================================================"
    echo ""
    exit 1
fi

